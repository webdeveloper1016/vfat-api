import { BaseProvider } from '@ethersproject/providers';
import { Call } from './call';
import { Multicall } from './multicall';
export default class Provider {
    provider?: BaseProvider;
    multicall: Multicall | null;
    multicall2: Multicall | null;
    constructor();
    init(provider: BaseProvider): Promise<void>;
    /**
     * Makes one call to the multicall contract to retrieve eth balance of the given address.
     * @param address  Address of the account you want to look up
     */
    getEthBalance(address: string): Call;
    /**
     * Aggregates multiple calls into one call. Reverts when any of the calls fails. For
     * ignoring the success of each call, use {@link tryAll} instead.
     * @param calls  Array of Call objects containing information about each read call
     * @param block  Block number for this call
     */
    all<T>(calls: Call[], block?: number): Promise<T[]>;
    /**
     * Aggregates multiple calls into one call. If any of the calls fail, it returns a null value
     * in place of the failed call's return data.
     * @param calls  Array of Call objects containing information about each read call
     * @param block  Block number for this call
     */
    tryAll<T>(calls: Call[], block?: number): Promise<(T | null)[]>;
}
