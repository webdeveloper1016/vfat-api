"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addClassPropertyDeclarations = void 0;
const ts_morph_1 = require("ts-morph");
const parse_js_classes_1 = require("./parse-js-classes");
const correct_js_properties_1 = require("./correct-js-properties");
const logger_1 = __importDefault(require("../../logger/logger"));
/**
 * Parses all source files looking for ES6 classes, and takes any `this`
 * property access to create a PropertyDeclaration for the class.
 *
 * For example:
 *
 *     class Something {
 *         constructor() {
 *             this.someProp = 1;
 *         }
 *     }
 *
 * Is changed to:
 *
 *     class Something {
 *         someProp: any;
 *
 *         constructor() {
 *             this.someProp = 1;
 *         }
 *     }
 */
function addClassPropertyDeclarations(tsAstProject) {
    // Parse the JS classes for all of the this.xyz properties that they use
    const jsClasses = parse_js_classes_1.parseJsClasses(tsAstProject);
    // Correct the JS classes' properties for superclass/subclass relationships
    // (essentially remove properties from subclasses that are defined by their
    // superclasses)
    const propertiesCorrectedJsClasses = correct_js_properties_1.correctJsProperties(jsClasses);
    // Fill in field definitions for each of the classes
    propertiesCorrectedJsClasses.forEach(jsClass => {
        const sourceFile = tsAstProject.getSourceFileOrThrow(jsClass.path);
        logger_1.default.verbose(`  Updating class '${jsClass.name}' in '${sourceFile.getFilePath()}'`);
        const classDeclaration = sourceFile.getClassOrThrow(jsClass.name);
        const jsClassProperties = jsClass.properties;
        // If the utility was run against a TypeScript codebase, we should not
        // fill in property declarations for properties that are already
        // declared in the class. However, we *should* fill in any missing
        // declarations. Removing any already-declared declarations from the
        // jsClassProperties.
        const currentPropertyDeclarations = classDeclaration.getInstanceProperties()
            .reduce((props, prop) => {
            const propName = prop.getName();
            return propName ? props.add(propName) : props;
        }, new Set());
        let undeclaredProperties = [...jsClassProperties]
            .filter((propName) => !currentPropertyDeclarations.has(propName));
        // If the utility found a reference to this.constructor, we don't want to
        // add a property called 'constructor'. Filter that out now.
        // https://github.com/gregjacobs/js-to-ts-converter/issues/9
        undeclaredProperties = undeclaredProperties
            .filter((propName) => propName !== 'constructor');
        // Add all currently-undeclared properties
        const propertyDeclarations = undeclaredProperties.map(propertyName => {
            return {
                name: propertyName,
                type: 'any',
                scope: ts_morph_1.Scope.Public
            };
        });
        logger_1.default.verbose(`    Adding property declarations for properties: '${undeclaredProperties.join("', '")}'`);
        classDeclaration.insertProperties(0, propertyDeclarations);
    });
    return tsAstProject;
}
exports.addClassPropertyDeclarations = addClassPropertyDeclarations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWNsYXNzLXByb3BlcnR5LWRlY2xhcmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb252ZXJ0ZXIvYWRkLWNsYXNzLXByb3BlcnR5LWRlY2xhcmF0aW9ucy9hZGQtY2xhc3MtcHJvcGVydHktZGVjbGFyYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUFvRztBQUNwRyx5REFBb0Q7QUFDcEQsbUVBQThEO0FBQzlELGlFQUF5QztBQUV6Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJHO0FBQ0gsU0FBZ0IsNEJBQTRCLENBQUUsWUFBcUI7SUFDbEUsd0VBQXdFO0lBQ3hFLE1BQU0sU0FBUyxHQUFHLGlDQUFjLENBQUUsWUFBWSxDQUFFLENBQUM7SUFFakQsMkVBQTJFO0lBQzNFLDJFQUEyRTtJQUMzRSxnQkFBZ0I7SUFDaEIsTUFBTSw0QkFBNEIsR0FBRywyQ0FBbUIsQ0FBRSxTQUFTLENBQUUsQ0FBQztJQUV0RSxvREFBb0Q7SUFDcEQsNEJBQTRCLENBQUMsT0FBTyxDQUFFLE9BQU8sQ0FBQyxFQUFFO1FBQy9DLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxvQkFBb0IsQ0FBRSxPQUFPLENBQUMsSUFBSSxDQUFFLENBQUM7UUFDckUsZ0JBQU0sQ0FBQyxPQUFPLENBQUUscUJBQXFCLE9BQU8sQ0FBQyxJQUFJLFNBQVMsVUFBVSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUUsQ0FBQztRQUV4RixNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUUsT0FBTyxDQUFDLElBQUssQ0FBRSxDQUFDO1FBQ3JFLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUU3QyxzRUFBc0U7UUFDdEUsZ0VBQWdFO1FBQ2hFLGtFQUFrRTtRQUNsRSxvRUFBb0U7UUFDcEUscUJBQXFCO1FBQ3JCLE1BQU0sMkJBQTJCLEdBQUcsZ0JBQWdCLENBQUMscUJBQXFCLEVBQUU7YUFDMUUsTUFBTSxDQUFFLENBQUUsS0FBa0IsRUFBRSxJQUFnQyxFQUFHLEVBQUU7WUFDbkUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2hDLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFFLFFBQVEsQ0FBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDakQsQ0FBQyxFQUFFLElBQUksR0FBRyxFQUFVLENBQUUsQ0FBQztRQUV4QixJQUFJLG9CQUFvQixHQUFHLENBQUUsR0FBRyxpQkFBaUIsQ0FBRTthQUNqRCxNQUFNLENBQUUsQ0FBRSxRQUFnQixFQUFHLEVBQUUsQ0FBQyxDQUFDLDJCQUEyQixDQUFDLEdBQUcsQ0FBRSxRQUFRLENBQUUsQ0FBRSxDQUFDO1FBRWpGLHlFQUF5RTtRQUN6RSw0REFBNEQ7UUFDNUQsNERBQTREO1FBQzVELG9CQUFvQixHQUFHLG9CQUFvQjthQUN6QyxNQUFNLENBQUUsQ0FBRSxRQUFnQixFQUFHLEVBQUUsQ0FBQyxRQUFRLEtBQUssYUFBYSxDQUFFLENBQUM7UUFFL0QsMENBQTBDO1FBQzFDLE1BQU0sb0JBQW9CLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFFLFlBQVksQ0FBQyxFQUFFO1lBQ3JFLE9BQU87Z0JBQ04sSUFBSSxFQUFFLFlBQVk7Z0JBQ2xCLElBQUksRUFBRSxLQUFLO2dCQUNYLEtBQUssRUFBRSxnQkFBSyxDQUFDLE1BQU07YUFDYSxDQUFDO1FBQ25DLENBQUMsQ0FBRSxDQUFDO1FBRUosZ0JBQU0sQ0FBQyxPQUFPLENBQUUscURBQXFELG9CQUFvQixDQUFDLElBQUksQ0FBRSxNQUFNLENBQUUsR0FBRyxDQUFFLENBQUM7UUFDOUcsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUUsQ0FBQyxFQUFFLG9CQUFvQixDQUFFLENBQUM7SUFDOUQsQ0FBQyxDQUFFLENBQUM7SUFFSixPQUFPLFlBQVksQ0FBQztBQUNyQixDQUFDO0FBbkRELG9FQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb2plY3QsIENsYXNzSW5zdGFuY2VQcm9wZXJ0eVR5cGVzLCBQcm9wZXJ0eURlY2xhcmF0aW9uU3RydWN0dXJlLCBTY29wZSB9IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0IHsgcGFyc2VKc0NsYXNzZXMgfSBmcm9tIFwiLi9wYXJzZS1qcy1jbGFzc2VzXCI7XG5pbXBvcnQgeyBjb3JyZWN0SnNQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vY29ycmVjdC1qcy1wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi9sb2dnZXIvbG9nZ2VyXCI7XG5cbi8qKlxuICogUGFyc2VzIGFsbCBzb3VyY2UgZmlsZXMgbG9va2luZyBmb3IgRVM2IGNsYXNzZXMsIGFuZCB0YWtlcyBhbnkgYHRoaXNgXG4gKiBwcm9wZXJ0eSBhY2Nlc3MgdG8gY3JlYXRlIGEgUHJvcGVydHlEZWNsYXJhdGlvbiBmb3IgdGhlIGNsYXNzLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqICAgICBjbGFzcyBTb21ldGhpbmcge1xuICogICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAqICAgICAgICAgICAgIHRoaXMuc29tZVByb3AgPSAxO1xuICogICAgICAgICB9XG4gKiAgICAgfVxuICpcbiAqIElzIGNoYW5nZWQgdG86XG4gKlxuICogICAgIGNsYXNzIFNvbWV0aGluZyB7XG4gKiAgICAgICAgIHNvbWVQcm9wOiBhbnk7XG4gKlxuICogICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAqICAgICAgICAgICAgIHRoaXMuc29tZVByb3AgPSAxO1xuICogICAgICAgICB9XG4gKiAgICAgfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQ2xhc3NQcm9wZXJ0eURlY2xhcmF0aW9ucyggdHNBc3RQcm9qZWN0OiBQcm9qZWN0ICk6IFByb2plY3Qge1xuXHQvLyBQYXJzZSB0aGUgSlMgY2xhc3NlcyBmb3IgYWxsIG9mIHRoZSB0aGlzLnh5eiBwcm9wZXJ0aWVzIHRoYXQgdGhleSB1c2Vcblx0Y29uc3QganNDbGFzc2VzID0gcGFyc2VKc0NsYXNzZXMoIHRzQXN0UHJvamVjdCApO1xuXG5cdC8vIENvcnJlY3QgdGhlIEpTIGNsYXNzZXMnIHByb3BlcnRpZXMgZm9yIHN1cGVyY2xhc3Mvc3ViY2xhc3MgcmVsYXRpb25zaGlwc1xuXHQvLyAoZXNzZW50aWFsbHkgcmVtb3ZlIHByb3BlcnRpZXMgZnJvbSBzdWJjbGFzc2VzIHRoYXQgYXJlIGRlZmluZWQgYnkgdGhlaXJcblx0Ly8gc3VwZXJjbGFzc2VzKVxuXHRjb25zdCBwcm9wZXJ0aWVzQ29ycmVjdGVkSnNDbGFzc2VzID0gY29ycmVjdEpzUHJvcGVydGllcygganNDbGFzc2VzICk7XG5cblx0Ly8gRmlsbCBpbiBmaWVsZCBkZWZpbml0aW9ucyBmb3IgZWFjaCBvZiB0aGUgY2xhc3Nlc1xuXHRwcm9wZXJ0aWVzQ29ycmVjdGVkSnNDbGFzc2VzLmZvckVhY2goIGpzQ2xhc3MgPT4ge1xuXHRcdGNvbnN0IHNvdXJjZUZpbGUgPSB0c0FzdFByb2plY3QuZ2V0U291cmNlRmlsZU9yVGhyb3coIGpzQ2xhc3MucGF0aCApO1xuXHRcdGxvZ2dlci52ZXJib3NlKCBgICBVcGRhdGluZyBjbGFzcyAnJHtqc0NsYXNzLm5hbWV9JyBpbiAnJHtzb3VyY2VGaWxlLmdldEZpbGVQYXRoKCl9J2AgKTtcblxuXHRcdGNvbnN0IGNsYXNzRGVjbGFyYXRpb24gPSBzb3VyY2VGaWxlLmdldENsYXNzT3JUaHJvdygganNDbGFzcy5uYW1lISApO1xuXHRcdGNvbnN0IGpzQ2xhc3NQcm9wZXJ0aWVzID0ganNDbGFzcy5wcm9wZXJ0aWVzO1xuXG5cdFx0Ly8gSWYgdGhlIHV0aWxpdHkgd2FzIHJ1biBhZ2FpbnN0IGEgVHlwZVNjcmlwdCBjb2RlYmFzZSwgd2Ugc2hvdWxkIG5vdFxuXHRcdC8vIGZpbGwgaW4gcHJvcGVydHkgZGVjbGFyYXRpb25zIGZvciBwcm9wZXJ0aWVzIHRoYXQgYXJlIGFscmVhZHlcblx0XHQvLyBkZWNsYXJlZCBpbiB0aGUgY2xhc3MuIEhvd2V2ZXIsIHdlICpzaG91bGQqIGZpbGwgaW4gYW55IG1pc3Npbmdcblx0XHQvLyBkZWNsYXJhdGlvbnMuIFJlbW92aW5nIGFueSBhbHJlYWR5LWRlY2xhcmVkIGRlY2xhcmF0aW9ucyBmcm9tIHRoZVxuXHRcdC8vIGpzQ2xhc3NQcm9wZXJ0aWVzLlxuXHRcdGNvbnN0IGN1cnJlbnRQcm9wZXJ0eURlY2xhcmF0aW9ucyA9IGNsYXNzRGVjbGFyYXRpb24uZ2V0SW5zdGFuY2VQcm9wZXJ0aWVzKClcblx0XHRcdC5yZWR1Y2UoICggcHJvcHM6IFNldDxzdHJpbmc+LCBwcm9wOiBDbGFzc0luc3RhbmNlUHJvcGVydHlUeXBlcyApID0+IHtcblx0XHRcdFx0Y29uc3QgcHJvcE5hbWUgPSBwcm9wLmdldE5hbWUoKTtcblx0XHRcdFx0cmV0dXJuIHByb3BOYW1lID8gcHJvcHMuYWRkKCBwcm9wTmFtZSApIDogcHJvcHM7XG5cdFx0XHR9LCBuZXcgU2V0PHN0cmluZz4oKSApO1xuXG5cdFx0bGV0IHVuZGVjbGFyZWRQcm9wZXJ0aWVzID0gWyAuLi5qc0NsYXNzUHJvcGVydGllcyBdXG5cdFx0XHQuZmlsdGVyKCAoIHByb3BOYW1lOiBzdHJpbmcgKSA9PiAhY3VycmVudFByb3BlcnR5RGVjbGFyYXRpb25zLmhhcyggcHJvcE5hbWUgKSApO1xuXG5cdFx0Ly8gSWYgdGhlIHV0aWxpdHkgZm91bmQgYSByZWZlcmVuY2UgdG8gdGhpcy5jb25zdHJ1Y3Rvciwgd2UgZG9uJ3Qgd2FudCB0b1xuXHRcdC8vIGFkZCBhIHByb3BlcnR5IGNhbGxlZCAnY29uc3RydWN0b3InLiBGaWx0ZXIgdGhhdCBvdXQgbm93LlxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVnamFjb2JzL2pzLXRvLXRzLWNvbnZlcnRlci9pc3N1ZXMvOVxuXHRcdHVuZGVjbGFyZWRQcm9wZXJ0aWVzID0gdW5kZWNsYXJlZFByb3BlcnRpZXNcblx0XHRcdC5maWx0ZXIoICggcHJvcE5hbWU6IHN0cmluZyApID0+IHByb3BOYW1lICE9PSAnY29uc3RydWN0b3InICk7XG5cblx0XHQvLyBBZGQgYWxsIGN1cnJlbnRseS11bmRlY2xhcmVkIHByb3BlcnRpZXNcblx0XHRjb25zdCBwcm9wZXJ0eURlY2xhcmF0aW9ucyA9IHVuZGVjbGFyZWRQcm9wZXJ0aWVzLm1hcCggcHJvcGVydHlOYW1lID0+IHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG5hbWU6IHByb3BlcnR5TmFtZSxcblx0XHRcdFx0dHlwZTogJ2FueScsXG5cdFx0XHRcdHNjb3BlOiBTY29wZS5QdWJsaWNcblx0XHRcdH0gYXMgUHJvcGVydHlEZWNsYXJhdGlvblN0cnVjdHVyZTtcblx0XHR9ICk7XG5cblx0XHRsb2dnZXIudmVyYm9zZSggYCAgICBBZGRpbmcgcHJvcGVydHkgZGVjbGFyYXRpb25zIGZvciBwcm9wZXJ0aWVzOiAnJHt1bmRlY2xhcmVkUHJvcGVydGllcy5qb2luKCBcIicsICdcIiApfSdgICk7XG5cdFx0Y2xhc3NEZWNsYXJhdGlvbi5pbnNlcnRQcm9wZXJ0aWVzKCAwLCBwcm9wZXJ0eURlY2xhcmF0aW9ucyApO1xuXHR9ICk7XG5cblx0cmV0dXJuIHRzQXN0UHJvamVjdDtcbn0iXX0=