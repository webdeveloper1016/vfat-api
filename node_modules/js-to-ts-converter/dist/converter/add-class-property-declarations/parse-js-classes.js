"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseJsClasses = void 0;
const ts_morph_1 = require("ts-morph");
const js_class_1 = require("./js-class");
const set_utils_1 = require("../../util/set-utils");
const parse_destructured_props_1 = require("../../util/parse-destructured-props");
const parse_superclass_name_and_path_1 = require("./parse-superclass-name-and-path");
const is_this_referencing_var_1 = require("../../util/is-this-referencing-var");
const is_property_access_with_obj_1 = require("../../util/is-property-access-with-obj");
const logger_1 = __importDefault(require("../../logger/logger"));
/**
 * Parses the classes out of each .js file in the SourceFilesCollection, and
 * forms a tree representing their hierarchy.
 *
 * ## Description of algorithm:
 *
 * Each source file is parsed to find all file-level classes. Their superclasses
 * and import paths for those superclasses are also recorded to form an
 * adjacency list graph of classes keyed by their file path.
 *
 * Each class is also processed to find and record any property accesses of the
 * `this` object. For instance, in the following class, there are 3
 * PropertyAccessExpressions that pull from the `this` object ('something1',
 * 'something2', and 'something3'):
 *
 *     class Something {
 *         constructor() {
 *             this.something1 = 1;
 *             this.something2 = 2;
 *         }
 *
 *         someMethod() {
 *             console.log( this.something3 );
 *
 *             console.log( window.location );  // <-- not a `this` PropertyAccessExpression
 *         }
 *     }
 *
 * The returned graph will be used later to determine which TS class property
 * definitions should be placed in superclasses vs. subclasses. Properties used
 * by a superclass and a subclass should only be defined in the superclass.
 */
function parseJsClasses(tsAstProject) {
    logger_1.default.verbose("Parsing JS classes in the codebase...");
    const files = tsAstProject.getSourceFiles();
    const jsClasses = files.reduce((classes, file) => {
        logger_1.default.debug(`Parsing classes in file: ${file.getFilePath()}`);
        const fileClasses = parseFileClasses(file);
        return classes.concat(fileClasses);
    }, []);
    return jsClasses;
}
exports.parseJsClasses = parseJsClasses;
/**
 * Parses the file-level classes out of the given `sourceFile`.
 */
function parseFileClasses(sourceFile) {
    return sourceFile.getClasses().map(fileClass => {
        const className = fileClass.getName();
        logger_1.default.debug(`  Parsing class: ${className}`);
        const { superclassName, superclassPath } = parse_superclass_name_and_path_1.parseSuperclassNameAndPath(sourceFile, fileClass);
        const methodNames = getMethodNames(fileClass);
        const propertyNames = getPropertyNames(fileClass);
        const propertiesMinusMethods = set_utils_1.difference(propertyNames, methodNames); // remove any method names from this Set
        return new js_class_1.JsClass({
            path: sourceFile.getFilePath(),
            name: className,
            superclassName,
            superclassPath,
            methods: methodNames,
            properties: propertiesMinusMethods
        });
    });
}
/**
 * Parses the method names from the class into a Set of strings.
 */
function getMethodNames(fileClass) {
    return fileClass.getMethods()
        .reduce((methods, method) => {
        return methods.add(method.getName());
    }, new Set());
}
/**
 * Retrieves the list of propertyNames used in the class. This may also include
 * method names (which are technically properties), which we'll filter out later.
 */
function getPropertyNames(fileClass) {
    const existingPropertyDeclarations = parsePropertyDeclarations(fileClass); // in case we are actually parsing a TypeScript class with existing declarations
    const propertyAccesses = parsePropertyAccesses(fileClass);
    const destructuringUsesOfProperties = parseDestructuringThisAssignments(fileClass);
    const propertyAccessesOfThisAssignedVars = parsePropertyAccessesOfThisAssignedVars(fileClass);
    return set_utils_1.union(existingPropertyDeclarations, propertyAccesses, destructuringUsesOfProperties, propertyAccessesOfThisAssignedVars);
}
/**
 * In the case that the utility is actually parsing TypeScript classes with
 * existing property declarations, we want to know about these so we don't
 * accidentally write in new ones of the same name.
 */
function parsePropertyDeclarations(fileClass) {
    return fileClass.getInstanceProperties()
        .reduce((props, prop) => {
        const propName = prop.getName();
        return propName ? props.add(propName) : props; // don't add unnamed properties (not sure how we would have one of those, but seems its possible according to the TsSimpleAst types)
    }, new Set());
}
/**
 * Parses the property names of `this` PropertyAccessExpressions.
 *
 * Examples:
 *
 *     this.something = 42;
 *     console.log( this.something2 );
 *
 *     const { destructured1, destructured2 } = this;
 *
 * Method returns:
 *
 *    Set( [ 'something', 'something2', 'destructured1', 'destructured2' ] )
 */
function parsePropertyAccesses(fileClass) {
    // First, find all of the `this.something` properties
    const thisProps = fileClass
        .getDescendantsOfKind(ts_morph_1.SyntaxKind.PropertyAccessExpression)
        .filter((prop) => prop.getExpression().getKind() === ts_morph_1.SyntaxKind.ThisKeyword);
    const propNamesSet = thisProps
        .reduce((props, prop) => {
        return props.add(prop.getName());
    }, new Set());
    return propNamesSet;
}
/**
 * Parses any object destructuring statements of the form:
 *
 *     var { a, b } = this;
 *
 * And returns Set( [ 'a', 'b' ] ) in this case.
 */
function parseDestructuringThisAssignments(fileClass) {
    // Second, find any `var { a, b } = this` statements
    const destructuredProps = fileClass
        .getDescendantsOfKind(ts_morph_1.SyntaxKind.VariableDeclaration)
        .filter((varDec) => {
        return varDec.compilerNode.name.kind === ts_morph_1.SyntaxKind.ObjectBindingPattern;
    });
    return destructuredProps
        .reduce((propNames, varDec) => {
        const destructuredPropNames = parse_destructured_props_1.parseDestructuredProps(varDec.compilerNode.name);
        destructuredPropNames.forEach(propName => propNames.add(propName));
        return propNames;
    }, new Set());
}
/**
 * Parses property accesses of variables that are assigned to the `this`
 * keyword.
 *
 * For example:
 *
 *     var that = this;
 *
 *     that.someProp1 = 1;
 *     that.someProp2 = 2;
 *
 * In the above code, the Set( [ 'someProp1', 'someProp2' ] ) is returned
 */
function parsePropertyAccessesOfThisAssignedVars(fileClass) {
    const methods = fileClass.getMethods();
    return methods.reduce((propNames, method) => {
        const thisVarDeclarations = method
            .getDescendantsOfKind(ts_morph_1.SyntaxKind.VariableDeclaration)
            .filter(is_this_referencing_var_1.isThisReferencingVar);
        // Get the array of identifiers assigned to `this`. Ex: [ 'that', 'self' ]
        const thisVarIdentifiers = thisVarDeclarations
            .map((thisVarDec) => thisVarDec.getName());
        thisVarIdentifiers.forEach((thisVarIdentifier) => {
            // Get the properties accessed from the `this` identifiers (i.e. from
            // 'that', 'self', etc.)
            const propNamesAccessedFromIdentifier = method
                .getDescendantsOfKind(ts_morph_1.SyntaxKind.PropertyAccessExpression)
                .filter(is_property_access_with_obj_1.propertyAccessWithObjFilter(thisVarIdentifier))
                .map((p) => p.getName());
            propNamesAccessedFromIdentifier
                .forEach((propName) => propNames.add(propName));
        });
        return propNames;
    }, new Set());
}
//# sourceMappingURL=data:application/json;base64,