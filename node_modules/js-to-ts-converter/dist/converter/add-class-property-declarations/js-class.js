"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsClass = void 0;
const set_utils_1 = require("../../util/set-utils");
/**
 * Represents a JavaScript class found in a source file.
 */
class JsClass {
    constructor(cfg) {
        this.name = cfg.name;
        this.path = cfg.path;
        this.superclassName = cfg.superclassName;
        this.superclassPath = cfg.superclassPath;
        this.methods = cfg.methods || new Set();
        this.properties = cfg.properties || new Set();
        this.members = set_utils_1.union(this.methods, this.properties);
    }
    /**
     * String identifier for the JsClass which is a combination of its file path
     * and class name. Used to store JsClass nodes on a graphlib Graph.
     */
    get id() {
        return `${this.path}_${this.name}`;
    }
    /**
     * Retrieves the ID of the superclass JsClass instance, if the JsClass has
     * one. If not, returns undefined.
     *
     * Also returns `undefined` if the class is found to be in the node_modules
     * folder, as we don't want to attempt to parse ES5 modules.
     */
    get superclassId() {
        if (this.isSuperclassInNodeModules()) {
            // If the superclass is in the node_modules folder, we'll
            // essentially treat this JsClass as if it didn't have a superclass.
            // See `isSuperclassInNodeModules()` jsdoc for details.
            return undefined;
        }
        else {
            return this.superclassName && `${this.superclassPath}_${this.superclassName}`;
        }
    }
    /**
     * Determines if the JsClass's superclass was found in the node_modules
     * directory (i.e. it extends from another package).
     *
     * If so, we're not going to try to understand a possibly ES5 module for
     * its properties, so we'll just stop processing at that point.
     */
    isSuperclassInNodeModules() {
        return this.superclassPath === undefined;
    }
}
exports.JsClass = JsClass;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMtY2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udmVydGVyL2FkZC1jbGFzcy1wcm9wZXJ0eS1kZWNsYXJhdGlvbnMvanMtY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQTZDO0FBRTdDOztHQUVHO0FBQ0gsTUFBYSxPQUFPO0lBbURuQixZQUFhLEdBT1o7UUFDQSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQztRQUN6QyxJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksR0FBRyxFQUFVLENBQUM7UUFDaEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxJQUFJLElBQUksR0FBRyxFQUFVLENBQUM7UUFFdEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxpQkFBSyxDQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFXLEVBQUU7UUFDWixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILElBQVcsWUFBWTtRQUN0QixJQUFJLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxFQUFHO1lBQ3RDLHlEQUF5RDtZQUN6RCxvRUFBb0U7WUFDcEUsdURBQXVEO1lBQ3ZELE9BQU8sU0FBUyxDQUFDO1NBRWpCO2FBQU07WUFDTixPQUFPLElBQUksQ0FBQyxjQUFjLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUM5RTtJQUNGLENBQUM7SUFHRDs7Ozs7O09BTUc7SUFDSSx5QkFBeUI7UUFDL0IsT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFNBQVMsQ0FBQztJQUMxQyxDQUFDO0NBRUQ7QUE1R0QsMEJBNEdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5pb24gfSBmcm9tIFwiLi4vLi4vdXRpbC9zZXQtdXRpbHNcIjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgSmF2YVNjcmlwdCBjbGFzcyBmb3VuZCBpbiBhIHNvdXJjZSBmaWxlLlxuICovXG5leHBvcnQgY2xhc3MgSnNDbGFzcyB7XG5cdC8qKlxuXHQgKiBUaGUgbmFtZSBvZiB0aGUgY2xhc3MuXG5cdCAqXG5cdCAqIFdpbGwgYmUgdW5kZWZpbmVkIGZvciBhIGRlZmF1bHQgZXhwb3J0IGNsYXNzLlxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuXHQvKipcblx0ICogVGhlIGFic29sdXRlIHBhdGggb2YgdGhlIGZpbGUgdGhhdCB0aGUgY2xhc3Mgd2FzIGZvdW5kIGluLlxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIG5hbWUgb2YgdGhpcyBjbGFzcydzIHN1cGVyY2xhc3MuIFdpbGwgYmUgYHVuZGVmaW5lZGAgaWYgdGhlIGNsYXNzXG5cdCAqIGRvZXMgbm90IGhhdmUgYSBzdXBlcmNsYXNzLlxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IHN1cGVyY2xhc3NOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cblx0LyoqXG5cdCAqIFRoZSBwYXRoIHRvIHRoZSBmaWxlIHdoaWNoIGhvbGRzIHRoaXMgY2xhc3MncyBzdXBlcmNsYXNzLiBJZiB0aGUgc2FtZVxuXHQgKiBmaWxlIHRoYXQgaG9sZHMgdGhpcyBjbGFzcyBhbHNvIGhvbGRzIGl0cyBzdXBlcmNsYXNzLCB0aGlzIHdpbGwgYmUgdGhlXG5cdCAqIHNhbWUgdmFsdWUgYXMgdGhlIHtAbGluayAjcGF0aH0uXG5cdCAqXG5cdCAqIFdpbGwgYmUgYHVuZGVmaW5lZGAgaWYgdGhlIHN1cGVyY2xhc3Mgd2FzIGZvdW5kIGluIHRoZSBub2RlX21vZHVsZXNcblx0ICogZm9sZGVyLiBXZSBkb24ndCB0cnkgdG8gcmVzb2x2ZSB0aGUgcGF0aCBvZiBhIG1vZHVsZSB0aGF0IGV4aXN0cyBpbiB0aGVcblx0ICogbm9kZV9tb2R1bGVzIGZvbGRlciBhcyB0aGV5J3JlIG5vdCByZWxldmFudCB0byB0aGlzIGNvbnZlcnNpb24gdXRpbGl0eSxcblx0ICogYW5kIHdlIHdhbnQgdG8gYWxsb3cgY29udmVyc2lvbnMgb2YgY29kZWJhc2VzIHRoYXQgZG9uJ3QgaGF2ZVxuXHQgKiBub2RlX21vZHVsZXMgaW5zdGFsbGVkICh3aGljaCBjYW4gcmVhbGx5IGltcHJvdmUgcGVyZm9ybWFuY2UgYXNcblx0ICogdHMtbW9ycGggZG9lc24ndCB0cnkgdG8gcmVzb2x2ZSB0aGVtIHdoZW4gaXQgZmluZHMgaW1wb3J0cyBpbiAudHNcblx0ICogZmlsZXMpXG5cdCAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgc3VwZXJjbGFzc1BhdGg6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuXHQvKipcblx0ICogVGhlIHNldCBvZiBtZXRob2RzIGZvdW5kIGluIHRoZSBjbGFzcy5cblx0ICovXG5cdHB1YmxpYyByZWFkb25seSBtZXRob2RzOiBTZXQ8c3RyaW5nPjtcblxuXHQvKipcblx0ICogVGhlIHNldCBvZiBwcm9wZXJ0aWVzIGZvdW5kIHRvIGJlIHVzZWQgaW4gdGhlIGNsYXNzLiBUaGVzZSBhcmUgaW5mZXJyZWRcblx0ICogZnJvbSB1c2FnZXMuIEZvciBleGFtcGxlOiBjb25zb2xlLmxvZyh0aGlzLnNvbWV0aGluZykgd291bGQgdGVsbCB1cyB0aGF0XG5cdCAqIHRoZSBjbGFzcyBoYXMgYSBwcm9wZXJ0eSBgc29tZXRoaW5nYFxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IHByb3BlcnRpZXM6IFNldDxzdHJpbmc+O1xuXG5cdC8qKlxuXHQgKiBBIHVuaW9uIG9mIHRoZSB7QGxpbmsgI21ldGhvZHN9IGFuZCB7QGxpbmsgI3Byb3BlcnRpZXN9IHNldHNcblx0ICovXG5cdHB1YmxpYyByZWFkb25seSBtZW1iZXJzOiBTZXQ8c3RyaW5nPjtcblxuXHRjb25zdHJ1Y3RvciggY2ZnOiB7XG5cdFx0bmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXHRcdHBhdGg6IHN0cmluZztcblx0XHRzdXBlcmNsYXNzTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuXHRcdHN1cGVyY2xhc3NQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQsXG5cdFx0bWV0aG9kcz86IFNldDxzdHJpbmc+O1xuXHRcdHByb3BlcnRpZXM/OiBTZXQ8c3RyaW5nPjtcblx0fSApIHtcblx0XHR0aGlzLm5hbWUgPSBjZmcubmFtZTtcblx0XHR0aGlzLnBhdGggPSBjZmcucGF0aDtcblx0XHR0aGlzLnN1cGVyY2xhc3NOYW1lID0gY2ZnLnN1cGVyY2xhc3NOYW1lO1xuXHRcdHRoaXMuc3VwZXJjbGFzc1BhdGggPSBjZmcuc3VwZXJjbGFzc1BhdGg7XG5cdFx0dGhpcy5tZXRob2RzID0gY2ZnLm1ldGhvZHMgfHwgbmV3IFNldDxzdHJpbmc+KCk7XG5cdFx0dGhpcy5wcm9wZXJ0aWVzID0gY2ZnLnByb3BlcnRpZXMgfHwgbmV3IFNldDxzdHJpbmc+KCk7XG5cblx0XHR0aGlzLm1lbWJlcnMgPSB1bmlvbiggdGhpcy5tZXRob2RzLCB0aGlzLnByb3BlcnRpZXMgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTdHJpbmcgaWRlbnRpZmllciBmb3IgdGhlIEpzQ2xhc3Mgd2hpY2ggaXMgYSBjb21iaW5hdGlvbiBvZiBpdHMgZmlsZSBwYXRoXG5cdCAqIGFuZCBjbGFzcyBuYW1lLiBVc2VkIHRvIHN0b3JlIEpzQ2xhc3Mgbm9kZXMgb24gYSBncmFwaGxpYiBHcmFwaC5cblx0ICovXG5cdHB1YmxpYyBnZXQgaWQoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gYCR7dGhpcy5wYXRofV8ke3RoaXMubmFtZX1gO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHJpZXZlcyB0aGUgSUQgb2YgdGhlIHN1cGVyY2xhc3MgSnNDbGFzcyBpbnN0YW5jZSwgaWYgdGhlIEpzQ2xhc3MgaGFzXG5cdCAqIG9uZS4gSWYgbm90LCByZXR1cm5zIHVuZGVmaW5lZC5cblx0ICpcblx0ICogQWxzbyByZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZSBjbGFzcyBpcyBmb3VuZCB0byBiZSBpbiB0aGUgbm9kZV9tb2R1bGVzXG5cdCAqIGZvbGRlciwgYXMgd2UgZG9uJ3Qgd2FudCB0byBhdHRlbXB0IHRvIHBhcnNlIEVTNSBtb2R1bGVzLlxuXHQgKi9cblx0cHVibGljIGdldCBzdXBlcmNsYXNzSWQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcblx0XHRpZiggdGhpcy5pc1N1cGVyY2xhc3NJbk5vZGVNb2R1bGVzKCkgKSB7XG5cdFx0XHQvLyBJZiB0aGUgc3VwZXJjbGFzcyBpcyBpbiB0aGUgbm9kZV9tb2R1bGVzIGZvbGRlciwgd2UnbGxcblx0XHRcdC8vIGVzc2VudGlhbGx5IHRyZWF0IHRoaXMgSnNDbGFzcyBhcyBpZiBpdCBkaWRuJ3QgaGF2ZSBhIHN1cGVyY2xhc3MuXG5cdFx0XHQvLyBTZWUgYGlzU3VwZXJjbGFzc0luTm9kZU1vZHVsZXMoKWAganNkb2MgZm9yIGRldGFpbHMuXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLnN1cGVyY2xhc3NOYW1lICYmIGAke3RoaXMuc3VwZXJjbGFzc1BhdGh9XyR7dGhpcy5zdXBlcmNsYXNzTmFtZX1gO1xuXHRcdH1cblx0fVxuXG5cblx0LyoqXG5cdCAqIERldGVybWluZXMgaWYgdGhlIEpzQ2xhc3MncyBzdXBlcmNsYXNzIHdhcyBmb3VuZCBpbiB0aGUgbm9kZV9tb2R1bGVzXG5cdCAqIGRpcmVjdG9yeSAoaS5lLiBpdCBleHRlbmRzIGZyb20gYW5vdGhlciBwYWNrYWdlKS5cblx0ICpcblx0ICogSWYgc28sIHdlJ3JlIG5vdCBnb2luZyB0byB0cnkgdG8gdW5kZXJzdGFuZCBhIHBvc3NpYmx5IEVTNSBtb2R1bGUgZm9yXG5cdCAqIGl0cyBwcm9wZXJ0aWVzLCBzbyB3ZSdsbCBqdXN0IHN0b3AgcHJvY2Vzc2luZyBhdCB0aGF0IHBvaW50LlxuXHQgKi9cblx0cHVibGljIGlzU3VwZXJjbGFzc0luTm9kZU1vZHVsZXMoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuc3VwZXJjbGFzc1BhdGggPT09IHVuZGVmaW5lZDtcblx0fVxuXG59Il19