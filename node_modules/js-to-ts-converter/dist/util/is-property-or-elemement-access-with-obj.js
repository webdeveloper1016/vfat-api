"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.propertyOrElementAccessWithObjFilter = exports.isPropertyOrElemementAccessWithObj = void 0;
const is_property_access_with_obj_1 = require("./is-property-access-with-obj");
const is_element_access_with_obj_1 = require("./is-element-access-with-obj");
/**
 * Determines if the given `node` is a PropertyAccessExpression or
 * ElementAccessExpression whose object is `obj`.
 *
 * Example, in the following expression:
 *
 *     obj.a
 *
 * This function will return true if called as:
 *
 *     isPropertyOrElemementAccessWithObj( expr, 'obj' );
 */
function isPropertyOrElemementAccessWithObj(node, objIdentifier) {
    return is_property_access_with_obj_1.isPropertyAccessWithObj(node, objIdentifier)
        || is_element_access_with_obj_1.isElementAccessWithObj(node, objIdentifier);
}
exports.isPropertyOrElemementAccessWithObj = isPropertyOrElemementAccessWithObj;
/**
 * Function intended to be used with Array.prototype.filter() to return any
 * PropertyAccessExpression or ElementAccessExpression that uses the object
 * `obj`.
 *
 * For example, in this source code:
 *
 *     const obj = { a: 1, b: 2 };
 *     obj.a = 3;
 *     obj['b'] = 4;
 *
 *     const obj2 = { a: 3, b: 4 };
 *     obj2.a = 5;
 *     obj2['b'] = 6;
 *
 * We can use the following to find the two 'obj2' property accesses:
 *
 *     const propOrElementAccesses = sourceFile
 *         .getDescendantsOfKind( SyntaxKind.PropertyAccessExpression )
 *         .concat( sourceFile
 *             .getDescendantsOfKind( SyntaxKind.ElementAccessExpression )
 *         );
 *
 *     const obj2PropOrElemAccesses = propOrElementAccesses
 *         .filter( propertyOrElementAccessWithObjFilter( 'obj2' ) );
 */
function propertyOrElementAccessWithObjFilter(objIdentifier) {
    return (node) => {
        return isPropertyOrElemementAccessWithObj(node, objIdentifier);
    };
}
exports.propertyOrElementAccessWithObjFilter = propertyOrElementAccessWithObjFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtcHJvcGVydHktb3ItZWxlbWVtZW50LWFjY2Vzcy13aXRoLW9iai5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2lzLXByb3BlcnR5LW9yLWVsZW1lbWVudC1hY2Nlc3Mtd2l0aC1vYmoudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0VBQXdFO0FBQ3hFLDZFQUFzRTtBQUV0RTs7Ozs7Ozs7Ozs7R0FXRztBQUNILFNBQWdCLGtDQUFrQyxDQUNqRCxJQUFVLEVBQ1YsYUFBcUI7SUFFckIsT0FBTyxxREFBdUIsQ0FBRSxJQUFJLEVBQUUsYUFBYSxDQUFFO1dBQ2pELG1EQUFzQixDQUFFLElBQUksRUFBRSxhQUFhLENBQUUsQ0FBQztBQUNuRCxDQUFDO0FBTkQsZ0ZBTUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCRztBQUNILFNBQWdCLG9DQUFvQyxDQUFFLGFBQXFCO0lBQzFFLE9BQU8sQ0FBRSxJQUFVLEVBQStELEVBQUU7UUFDbkYsT0FBTyxrQ0FBa0MsQ0FBRSxJQUFJLEVBQUUsYUFBYSxDQUFFLENBQUM7SUFDbEUsQ0FBQyxDQUFDO0FBQ0gsQ0FBQztBQUpELG9GQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24sIElkZW50aWZpZXIsIE5vZGUsIFByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbiwgVHlwZUd1YXJkcyB9IGZyb20gXCJ0cy1tb3JwaFwiO1xuaW1wb3J0IHsgaXNQcm9wZXJ0eUFjY2Vzc1dpdGhPYmogfSBmcm9tIFwiLi9pcy1wcm9wZXJ0eS1hY2Nlc3Mtd2l0aC1vYmpcIjtcbmltcG9ydCB7IGlzRWxlbWVudEFjY2Vzc1dpdGhPYmogfSBmcm9tIFwiLi9pcy1lbGVtZW50LWFjY2Vzcy13aXRoLW9ialwiO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIGBub2RlYCBpcyBhIFByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbiBvclxuICogRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24gd2hvc2Ugb2JqZWN0IGlzIGBvYmpgLlxuICpcbiAqIEV4YW1wbGUsIGluIHRoZSBmb2xsb3dpbmcgZXhwcmVzc2lvbjpcbiAqXG4gKiAgICAgb2JqLmFcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRydWUgaWYgY2FsbGVkIGFzOlxuICpcbiAqICAgICBpc1Byb3BlcnR5T3JFbGVtZW1lbnRBY2Nlc3NXaXRoT2JqKCBleHByLCAnb2JqJyApO1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9wZXJ0eU9yRWxlbWVtZW50QWNjZXNzV2l0aE9iaihcblx0bm9kZTogTm9kZSxcblx0b2JqSWRlbnRpZmllcjogc3RyaW5nXG4pOiBub2RlIGlzIFByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbiB8IEVsZW1lbnRBY2Nlc3NFeHByZXNzaW9uIHtcblx0cmV0dXJuIGlzUHJvcGVydHlBY2Nlc3NXaXRoT2JqKCBub2RlLCBvYmpJZGVudGlmaWVyIClcblx0XHR8fCBpc0VsZW1lbnRBY2Nlc3NXaXRoT2JqKCBub2RlLCBvYmpJZGVudGlmaWVyICk7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoKSB0byByZXR1cm4gYW55XG4gKiBQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gb3IgRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24gdGhhdCB1c2VzIHRoZSBvYmplY3RcbiAqIGBvYmpgLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbiB0aGlzIHNvdXJjZSBjb2RlOlxuICpcbiAqICAgICBjb25zdCBvYmogPSB7IGE6IDEsIGI6IDIgfTtcbiAqICAgICBvYmouYSA9IDM7XG4gKiAgICAgb2JqWydiJ10gPSA0O1xuICpcbiAqICAgICBjb25zdCBvYmoyID0geyBhOiAzLCBiOiA0IH07XG4gKiAgICAgb2JqMi5hID0gNTtcbiAqICAgICBvYmoyWydiJ10gPSA2O1xuICpcbiAqIFdlIGNhbiB1c2UgdGhlIGZvbGxvd2luZyB0byBmaW5kIHRoZSB0d28gJ29iajInIHByb3BlcnR5IGFjY2Vzc2VzOlxuICpcbiAqICAgICBjb25zdCBwcm9wT3JFbGVtZW50QWNjZXNzZXMgPSBzb3VyY2VGaWxlXG4gKiAgICAgICAgIC5nZXREZXNjZW5kYW50c09mS2luZCggU3ludGF4S2luZC5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gKVxuICogICAgICAgICAuY29uY2F0KCBzb3VyY2VGaWxlXG4gKiAgICAgICAgICAgICAuZ2V0RGVzY2VuZGFudHNPZktpbmQoIFN5bnRheEtpbmQuRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24gKVxuICogICAgICAgICApO1xuICpcbiAqICAgICBjb25zdCBvYmoyUHJvcE9yRWxlbUFjY2Vzc2VzID0gcHJvcE9yRWxlbWVudEFjY2Vzc2VzXG4gKiAgICAgICAgIC5maWx0ZXIoIHByb3BlcnR5T3JFbGVtZW50QWNjZXNzV2l0aE9iakZpbHRlciggJ29iajInICkgKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BlcnR5T3JFbGVtZW50QWNjZXNzV2l0aE9iakZpbHRlciggb2JqSWRlbnRpZmllcjogc3RyaW5nICk6ICggbm9kZTogTm9kZSApID0+IG5vZGUgaXMgUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uIHwgRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24ge1xuXHRyZXR1cm4gKCBub2RlOiBOb2RlICk6IG5vZGUgaXMgUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uIHwgRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24gPT4ge1xuXHRcdHJldHVybiBpc1Byb3BlcnR5T3JFbGVtZW1lbnRBY2Nlc3NXaXRoT2JqKCBub2RlLCBvYmpJZGVudGlmaWVyICk7XG5cdH07XG59Il19