"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const winston = __importStar(require("winston"));
const winstonLogger = winston.createLogger({
    level: 'verbose',
    transports: [
        new winston.transports.Console({
            format: winston.format.combine(winston.format.colorize(), winston.format.align(), winston.format.printf(info => `${info.level}: ${info.message}`))
        })
    ]
});
/**
 * Abstraction layer for the Winston logger. The methods are in order from
 * highest level of logging to lowest.
 */
class Logger {
    setLogLevel(logLevel) {
        winstonLogger.level = logLevel;
    }
    debug(message) {
        winstonLogger.log('debug', message);
    }
    verbose(message) {
        winstonLogger.log('verbose', message);
    }
    info(message) {
        winstonLogger.log('info', message);
    }
    log(message) {
        winstonLogger.log('info', message);
    }
    warn(message) {
        winstonLogger.log('warn', message);
    }
    error(message) {
        winstonLogger.log('error', message);
    }
}
const logger = new Logger();
exports.default = logger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ2dlci9sb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaURBQW1DO0FBR25DLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUU7SUFDM0MsS0FBSyxFQUFFLFNBQVM7SUFDaEIsVUFBVSxFQUFFO1FBQ1gsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBRTtZQUMvQixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQzdCLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQ3pCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQ3RCLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUMvRDtTQUNELENBQUU7S0FDSDtDQUNELENBQUUsQ0FBQztBQUdKOzs7R0FHRztBQUNILE1BQU0sTUFBTTtJQUVYLFdBQVcsQ0FBRSxRQUFrQjtRQUM5QixhQUFhLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztJQUNoQyxDQUFDO0lBRUQsS0FBSyxDQUFFLE9BQWU7UUFDckIsYUFBYSxDQUFDLEdBQUcsQ0FBRSxPQUFPLEVBQUUsT0FBTyxDQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVELE9BQU8sQ0FBRSxPQUFlO1FBQ3ZCLGFBQWEsQ0FBQyxHQUFHLENBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLENBQUUsT0FBZTtRQUNwQixhQUFhLENBQUMsR0FBRyxDQUFFLE1BQU0sRUFBRSxPQUFPLENBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsR0FBRyxDQUFFLE9BQWU7UUFDbkIsYUFBYSxDQUFDLEdBQUcsQ0FBRSxNQUFNLEVBQUUsT0FBTyxDQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksQ0FBRSxPQUFlO1FBQ3BCLGFBQWEsQ0FBQyxHQUFHLENBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBRSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxLQUFLLENBQUUsT0FBZTtRQUNyQixhQUFhLENBQUMsR0FBRyxDQUFFLE9BQU8sRUFBRSxPQUFPLENBQUUsQ0FBQztJQUN2QyxDQUFDO0NBRUQ7QUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBQzVCLGtCQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHdpbnN0b24gZnJvbSAnd2luc3Rvbic7XG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gXCIuL2xvZy1sZXZlbFwiO1xuXG5jb25zdCB3aW5zdG9uTG9nZ2VyID0gd2luc3Rvbi5jcmVhdGVMb2dnZXIoIHtcblx0bGV2ZWw6ICd2ZXJib3NlJywgIC8vIG1heSBiZSBjaGFuZ2VkIGJ5IExvZ2dlci5zZXRMb2dMZXZlbCgpXG5cdHRyYW5zcG9ydHM6IFtcblx0XHRuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoIHtcblx0XHRcdGZvcm1hdDogd2luc3Rvbi5mb3JtYXQuY29tYmluZShcblx0XHRcdFx0d2luc3Rvbi5mb3JtYXQuY29sb3JpemUoKSxcblx0XHRcdFx0d2luc3Rvbi5mb3JtYXQuYWxpZ24oKSxcblx0XHRcdFx0d2luc3Rvbi5mb3JtYXQucHJpbnRmKGluZm8gPT4gYCR7aW5mby5sZXZlbH06ICR7aW5mby5tZXNzYWdlfWApXG5cdFx0XHQpXG5cdFx0fSApXG5cdF1cbn0gKTtcblxuXG4vKipcbiAqIEFic3RyYWN0aW9uIGxheWVyIGZvciB0aGUgV2luc3RvbiBsb2dnZXIuIFRoZSBtZXRob2RzIGFyZSBpbiBvcmRlciBmcm9tXG4gKiBoaWdoZXN0IGxldmVsIG9mIGxvZ2dpbmcgdG8gbG93ZXN0LlxuICovXG5jbGFzcyBMb2dnZXIge1xuXG5cdHNldExvZ0xldmVsKCBsb2dMZXZlbDogTG9nTGV2ZWwgKSB7XG5cdFx0d2luc3RvbkxvZ2dlci5sZXZlbCA9IGxvZ0xldmVsO1xuXHR9XG5cblx0ZGVidWcoIG1lc3NhZ2U6IHN0cmluZyApIHtcblx0XHR3aW5zdG9uTG9nZ2VyLmxvZyggJ2RlYnVnJywgbWVzc2FnZSApO1xuXHR9XG5cblx0dmVyYm9zZSggbWVzc2FnZTogc3RyaW5nICkge1xuXHRcdHdpbnN0b25Mb2dnZXIubG9nKCAndmVyYm9zZScsIG1lc3NhZ2UgKTtcblx0fVxuXG5cdGluZm8oIG1lc3NhZ2U6IHN0cmluZyApIHtcblx0XHR3aW5zdG9uTG9nZ2VyLmxvZyggJ2luZm8nLCBtZXNzYWdlICk7XG5cdH1cblxuXHRsb2coIG1lc3NhZ2U6IHN0cmluZyApIHtcblx0XHR3aW5zdG9uTG9nZ2VyLmxvZyggJ2luZm8nLCBtZXNzYWdlICk7XG5cdH1cblxuXHR3YXJuKCBtZXNzYWdlOiBzdHJpbmcgKSB7XG5cdFx0d2luc3RvbkxvZ2dlci5sb2coICd3YXJuJywgbWVzc2FnZSApO1xuXHR9XG5cblx0ZXJyb3IoIG1lc3NhZ2U6IHN0cmluZyApIHtcblx0XHR3aW5zdG9uTG9nZ2VyLmxvZyggJ2Vycm9yJywgbWVzc2FnZSApO1xuXHR9XG5cbn1cblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuZXhwb3J0IGRlZmF1bHQgbG9nZ2VyOyJdfQ==