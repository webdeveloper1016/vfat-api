import { JsonFragment, JsonFragmentType, Result } from '@ethersproject/abi';
interface FunctionData {
    name: string;
    inputs: JsonFragmentType[];
    values: Result;
}
interface FunctionOutputData {
    name: string;
    outputs: JsonFragmentType[];
    values: Result;
}
interface Constructor {
    inputs: JsonFragmentType[];
    values: Result;
}
interface Event {
    name: string;
    inputs: JsonFragmentType[];
    values: Result;
}
interface EventEncoding {
    topics: string[];
    data: string;
}
declare class Coder {
    private abi;
    constructor(abi: JsonFragment[]);
    getFunctionSelector(name: string): string;
    getEventTopic(name: string): string;
    decodeConstructor(data: string): Constructor;
    decodeEvent(topics: string[], data: string): Event;
    decodeFunction(data: string): FunctionData;
    decodeFunctionOutput(name: string, data: string): FunctionOutputData;
    encodeConstructor(values: any[]): string;
    encodeEvent(name: string, values: any[]): EventEncoding;
    encodeFunction(name: string, values: any[]): string;
    encodeFunctionOutput(name: string, values: any[]): string;
    private getConstructor;
    private getFunctionByName;
    private getFunctionBySelector;
    private getEventByName;
    private getEventByTopic;
    private static getSignature;
}
export default Coder;
export { FunctionData, FunctionOutputData, Constructor, Event, EventEncoding };
